// lantern::Node b1(1.0,"b1");
	// lantern::Node b2(2.0,"b2");
	// lantern::Node b3(3.0,"b3");
	// lantern::Node b4 = b1 + b2;
	// lantern::Node b5 = b3 + b4;
	// b4.SetLabel("b4");
	// b5.SetLabel("b5");

	// std::cout << std::string(50,'=') << "\n";
	// lantern::print(b5);
	// lantern::print(b4);
	// lantern::print(b3);
	// lantern::print(b2);
	// lantern::print(b1);
	// std::cout << std::string(50,'=') << "\n";
	
	// b1.value = 2.0;
	// lantern::utility::Vector<lantern::Node*> fix_position_node;
	// lantern::FeedForward(&b5,fix_position_node);

	// std::cout << std::string(50,'=') << "\n";
	// lantern::print(b5);
	// lantern::print(b4);
	// lantern::print(b3);
	// lantern::print(b2);
	// lantern::print(b1);
	// std::cout << std::string(50,'=') << "\n";

	// lantern::Node c1(2.5,"c1");
	// lantern::Node c2(3.4,"c2");
	// lantern::Node c3 = c1 * c2;
	// lantern::Node c4 = c1 + c2;
	// lantern::Node c5 = c3 / c4;
	// lantern::Node c6 = c1 * c5;
	// c3.SetLabel("c3");
	// c4.SetLabel("c4");
	// c5.SetLabel("c5");
	// c6.SetLabel("c6");
	// lantern::ReverseModeAD(c6);
	
	// std::cout << std::string(50,'=') << "\n";
	// print(c6);
	// print(c5);
	// print(c4);
	// print(c3);
	// print(c2);
	// print(c1);
	// std::cout << std::string(50,'=');

	// Node a1(4.4,"a1");
	// Node a2(3.3,"a2");
	// Node a3 = Sigmoid(a1);
	// Node a4 = Sigmoid(a2);
	// Node a5 = NaturalLog(a4);
	// Node a6 = a4 * a5;
	// Node a7 = a3 * a6;
	// a3.SetLabel("a3");
	// a4.SetLabel("a4");
	// a5.SetLabel("a5");
	// a6.SetLabel("a6");
	// a7.SetLabel("a7");
	// ReverseModeAD(a7);

	// std::cout << std::string(50,'=') << "\n";
	// print(a7);
	// print(a6);
	// print(a5);
	// print(a4);
	// print(a3);
	// print(a2);
	// print(a1);
	// std::cout << std::string(50,'=');

	// Node x(2.5);
	// Node sg = Sigmoid(x);
	// Node sg2 = Sigmoid(sg);

	// ReverseModeAD(sg2);
	// std::cout << std::string(30,'=') << "\n";
	// print(sg2,"Sigmoid 2");
	// print(sg,"Sigmoid 1");
	// print(x,"x");
	// std::cout << std::string(30,'=') << "\n\n";

	// Node a(2.0);
	// Node b(3.0);
	// Node c(4.0);
	// Node x1 = a + b;
	// Node x2 = x1 * c;
	
	// ReverseModeAD(x2);
	// std::cout << std::string(30,'=') << "\n";
	// print(x2,"x2");
	// print(x1,"x1");
	// print(a,"a");
	// print(b,"b");
	// print(c,"c");
	// std::cout << std::string(30,'=') << "\n\n";

parent = objective.parents[i];
                    index = objective.child_index[i];
                    parent->prev_child_index = index;
                    gradient_of_function = objective.gradient_based_input(objective.prev_child_index, 0).scalar<double>() * lantern::math::dsigmoid(objective.value);
                    parent->vector_velocity(index, 0) = parent->vector_velocity(index, 0) * 0.9 + (1 - 0.9) * gradient_of_function * parent->value;
                    parent->gradient(index, 0) -= parent->vector_velocity(index, 0)  * 0.1; // !please delete 0.01 because it learning rate and not to be here, only dev purpose
                    parent->gradient_based_input(index, 0) = objective.gradient_based_input(objective.prev_child_index, 0) * parent->gradient(index, 0) * lantern::math::dsigmoid(objective.value);
                    /**
                     * update for bias for parent and for objective itself because the bias always be the last gradient element
                     * so we just need to update gradient of parent one more time
                     * and check if parent was an input skip update bias for it, because 
                     * input no need bias
                     * 
                     * the objective only update it's own bias if the objective was output
                     */
                    if(parent->op != Activation::NOTHING){
                        parent->vector_velocity(parent->total_gradient_size, 0) = parent->vector_velocity(parent->total_gradient_size, 0) * 0.9 + (1 - 0.9) *  gradient_of_function;
                        parent->gradient(parent->total_gradient_size, 0) -= parent->vector_velocity(parent->total_gradient_size, 0) * 0.1; // !please delete 0.01 because it learning rate and not to be here, only dev purpose
                    }
                    if(objective.total_gradient_size == 0){
                        objective.vector_velocity(1,0) = objective.vector_velocity(1,0) * 0.9 + (1 - 0.9) * gradient_of_function; 
                        objective.gradient(1,0) -= objective.vector_velocity(1,0) * 0.1; // !please delete 0.01 because it learning rate and not to be here, only dev purpose
                    }
